data <- read.csv("../data/ml-latest-small/ratings.csv")
View(data)
#Define a function to calculate RMSE
RMSE <- function(rating, est_rating){
sqr_err <- function(obs){
sqr_error <- (obs[3] - est_rating[as.character(obs[2]), as.character(obs[1])])^2
return(sqr_error)
}
return(sqrt(mean(apply(rating, 1, sqr_err))))
}
#Stochastic Gradient Descent
# a function returns a list containing factorized matrices p and q, training and testing RMSEs.
gradesc <- function(f = 10,
lambda = 0.3,lrate = 0.01, max.iter, stopping.deriv = 0.01,
data, train, test){
set.seed(0)
#random assign value to matrix p and q
p <- matrix(runif(f*U, -1, 1), ncol = U)
colnames(p) <- as.character(1:U)
q <- matrix(runif(f*I, -1, 1), ncol = I)
colnames(q) <- levels(as.factor(data$movieId))
train_RMSE <- c()
test_RMSE <- c()
for(l in 1:max.iter){
sample_idx <- sample(1:nrow(train), nrow(train))
#loop through each training case and perform update
for (s in sample_idx){
u <- as.character(train[s,1])
i <- as.character(train[s,2])
r_ui <- train[s,3]
e_ui <- r_ui - t(q[,i]) %*% p[,u]
grad_q <- e_ui %*% p[,u] - lambda * q[,i]
if (all(abs(grad_q) > stopping.deriv, na.rm = T)){
q[,i] <- q[,i] + lrate * grad_q
}
grad_p <- e_ui %*% q[,i] - lambda * p[,u]
if (all(abs(grad_p) > stopping.deriv, na.rm = T)){
p[,u] <- p[,u] + lrate * grad_p
}
}
#print the values of training and testing RMSE
if (l %% 10 == 0){
cat("epoch:", l, "\t")
est_rating <- t(q) %*% p
rownames(est_rating) <- levels(as.factor(data$movieId))
train_RMSE_cur <- RMSE(train, est_rating)
cat("training RMSE:", train_RMSE_cur, "\t")
train_RMSE <- c(train_RMSE, train_RMSE_cur)
test_RMSE_cur <- RMSE(test, est_rating)
cat("test RMSE:",test_RMSE_cur, "\n")
test_RMSE <- c(test_RMSE, test_RMSE_cur)
}
}
return(list(p = p, q = q, train_RMSE = train_RMSE, test_RMSE = test_RMSE))
}
test_idx <- sample(1:nrow(data), round(nrow(data)/5, 0))
train_idx <- setdiff(1:nrow(data), test_idx)
data_train <- data[train_idx,]
data_test <- data[test_idx,]
ret <- gradesc(data, data_train, data_test)
U <- length(unique(data$userId))
I <- length(unique(data$movieId))
ret <- gradesc(data, data_train, data_test)
ret <- gradesc(data = data, train = data_train, test = data_test)
ret <- gradesc(max.iter = 1000,data = data, train = data_train, test = data_test)
ret <- gradesc(max.iter = 50,data = data, train = data_train, test = data_test)
#random assign value to matrix p and q
p <- matrix(runif(f*U, -1, 1), ncol = U)
f <- 10
#random assign value to matrix p and q
p <- matrix(runif(f*U, -1, 1), ncol = U)
View(p)
colnames(p) <- as.character(1:U)
View(p)
U <- length(unique(data$userId))
I <- length(unique(data$movieId))
q <- matrix(runif(f*I, -1, 1), ncol = I)
colnames(q) <- levels(as.factor(data$movieId))
train_RMSE <- c()
test_RMSE <- c()
sample_idx <- sample(1:nrow(train), nrow(train))
train <- data_train
sample_idx <- sample(1:nrow(train), nrow(train))
?sample
unique(sample_idx)
length(unique(sample_idx))
sample_idx[1]
sample_idx[1] -> s
u <- as.character(train[s,1])
i <- as.character(train[s,2])
r_ui <- train[s,3]
q[,i]
getwd()
getwd()
source("../lib/Probalistic_ Matrix_Factorization_w_cv.R")
library(dplyr)
library(tidyr)
library(ggplot2)
library(doBy)
#Define a function to calculate RMSE
RMSE <- function(rating, est_rating){
sqr_err <- function(obs){
sqr_error <- (obs[3] - est_rating[as.character(obs[1]), as.character(obs[2])])^2
return(sqr_error)
}
return(sqrt(mean(apply(rating, 1, sqr_err))))
}
expand_r <- function(data, data.train){
a <- unique(data$userId)
b <- as.integer(levels(as.factor(data$movieId)))
c <- expand.grid("movieId" = b, "userId" = a) %>% select(c(userId, movieId))
new <- left_join(c, data.train, by = c("userId", "movieId")) %>% select(-timestamp)
new[is.na(new)] <- 0
return(new)
}
dist.cosine = function(x){
y =  as.dist( x %*% t(x) / (sqrt(rowSums(x^2) %*% t(rowSums(x^2)))) )
y <- as.matrix(y)
diag(y) <- 1
return(y)
}
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(0)
test_idx <- sample(1:nrow(data), round(nrow(data)/5, 0))
train_idx <- setdiff(1:nrow(data), test_idx)
data.train <- data[train_idx,]
data.test <- data[test_idx,]
P2_KNN <- function(data = data, data.train, data.test,K, D=10, sigma_V = 1, sigma_U = 0.1){
grad <- gradPMF(D, data, data.train, data.test,sigma_V, sigma_U)
v <- grad$V
u <- grad$U
A <- t(u)%*%v
dist <- dist.cosine(t(v))
d <- matrix(0,9724,9724)
for (i in 1:nrow(dist)){
d[i,which.maxn(dist[i,], K)]=1
}
R <- (A%*%d)/K
# r <- expand_r(data, data.train) %>% pivot_wider(names_from = movieId, values_from = rating) %>%
#   select(-userId) %>% as.matrix()
# r_new <- r/r
# C <- matrix(1,nrow=610,9724)
# for (i in 1:nrow(C)){
#   C[i,which(r_new[i,]==1)]=0
# }
# hi <- R*C
# knn_pred <- (R*C)+r
colnames(R) <- levels(as.factor(data$movieId))
train_RMSE <- RMSE(data.train,R)
test_RMSE <- RMSE(data.test,R)
return(list(pred=R,train_RMSE=train_RMSE,test_RMSE=test_RMSE))
}
r <- P2_KNN(data = data, data.train, data.test,30, D=5, sigma_V = 0.5, sigma_U = 1)
rating <- r$pred
save(rating, file="../output/ratings_A2_P2.RData")
tr <- r$train_RMSE
save(tr, file="../output/train_RMSE_A2_P2.RData")
te <- r$test_RMSE
save(te, file="../output/test_RMSE_A2_P2.RData")
